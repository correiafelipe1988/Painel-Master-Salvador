import { Motorcycle, ManutencaoData } from "@/lib/types";
import { normalizeMotorcycleModel } from "@/lib/utils/modelNormalizer";

/**
 * Calcula a diferen√ßa em dias entre duas datas incluindo ambos os dias (in√≠cio e fim)
 * Adiciona 1 dia para incluir o dia final no per√≠odo
 */
function calculateDaysDifference(startDate: string, endDate: string): number {
  const start = new Date(startDate);
  const end = new Date(endDate);
  const diffTime = end.getTime() - start.getTime();
  const diffDays = Math.floor(diffTime / (1000 * 60 * 60 * 24)) + 1; // +1 para incluir o dia final
  return Math.max(0, diffDays);
}

export interface RentalPeriod {
  placa: string;
  startDate: string;
  endDate: string | null; // null se ainda estiver alugada/relocada
  status: 'alugada' | 'relocada';
  durationDays: number;
  maintenanceCount: number;
  maintenanceRecords: ManutencaoData[];
}

export interface RentalAnalysis {
  placa: string;
  modelo: string;
  periods: RentalPeriod[];
  totalDays: number;
  averageDays: number;
  totalPeriods: number;
  totalMaintenances: number;
  currentStatus: string;
  isCurrentlyRented: boolean;
}

export interface ModelRentalStats {
  modelo: string;
  totalMotorcycles: number;
  completedPeriods: number;
  totalDays: number;
  averageDays: number;
  totalMaintenances: number;
  averageMaintenancesPerPeriod: number;
}

/**
 * Calcula per√≠odos de loca√ß√£o baseado nos dados dispon√≠veis
 * ESTRAT√âGIA ALTERNATIVA: Como n√£o h√° hist√≥rico m√∫ltiplo, calcula baseado no tempo atual de loca√ß√£o
 */
export function calculateRentalPeriods(
  motorcycles: Motorcycle[],
  maintenanceData: ManutencaoData[]
): RentalAnalysis[] {
  console.log('üîç Iniciando an√°lise de per√≠odos de loca√ß√£o (estrat√©gia alternativa)...');
  console.log(`üìä Total de registros de motos: ${motorcycles.length}`);
  console.log(`üîß Total de registros de manuten√ß√£o: ${maintenanceData.length}`);

  // Verificar se h√° m√∫ltiplos registros por placa (confirmar estrutura de dados)
  const motorcyclesByPlaca = new Map<string, Motorcycle[]>();
  
  motorcycles.forEach(moto => {
    if (!moto.placa) return;
    
    if (!motorcyclesByPlaca.has(moto.placa)) {
      motorcyclesByPlaca.set(moto.placa, []);
    }
    motorcyclesByPlaca.get(moto.placa)!.push(moto);
  });

  console.log(`üèçÔ∏è Placas √∫nicas encontradas: ${motorcyclesByPlaca.size}`);
  
  // Verificar estrutura de dados
  let hasMultipleRecordsPerPlate = false;
  motorcyclesByPlaca.forEach((motos, placa) => {
    if (motos.length > 1) {
      hasMultipleRecordsPerPlate = true;
      console.log(`üìù Placa ${placa} tem ${motos.length} registros hist√≥ricos`);
    }
  });

  const results: RentalAnalysis[] = [];
  let totalPeriodsFound = 0;
  let totalCompletedPeriods = 0;

  if (hasMultipleRecordsPerPlate) {
    console.log('‚úÖ Encontrado hist√≥rico m√∫ltiplo - usando an√°lise de transi√ß√µes');
    
    // L√≥gica original para dados com hist√≥rico
    motorcyclesByPlaca.forEach((motos, placa) => {
      const sortedMotos = motos
        .filter(m => m.data_ultima_mov)
        .sort((a, b) => new Date(a.data_ultima_mov!).getTime() - new Date(b.data_ultima_mov!).getTime());

      if (sortedMotos.length <= 1) return;

      const periods: RentalPeriod[] = [];
      
      // Analisar transi√ß√µes sequenciais
      for (let i = 0; i < sortedMotos.length - 1; i++) {
        const current = sortedMotos[i];
        const next = sortedMotos[i + 1];
        
        if (current.status === 'alugada' || current.status === 'relocada') {
          const startDateObj = new Date(current.data_ultima_mov!);
          const endDateObj = new Date(next.data_ultima_mov!);
          const durationDays = calculateDaysDifference(current.data_ultima_mov!, next.data_ultima_mov!);

          const maintenanceInPeriod = maintenanceData.filter(m => {
            if (m.veiculo_placa !== placa) return false;
            const maintenanceDate = new Date(m.data);
            return maintenanceDate >= startDateObj && maintenanceDate <= endDateObj;
          });

          periods.push({
            placa,
            startDate: current.data_ultima_mov!,
            endDate: next.data_ultima_mov!,
            status: current.status,
            durationDays: durationDays,
            maintenanceCount: maintenanceInPeriod.length,
            maintenanceRecords: maintenanceInPeriod
          });

          totalCompletedPeriods++;
          console.log(`    ‚úÖ Per√≠odo hist√≥rico: ${current.data_ultima_mov} ‚Üí ${next.data_ultima_mov} (${durationDays} dias)`);
        }
      }

      if (periods.length > 0) {
        const latestMoto = sortedMotos[sortedMotos.length - 1];
        const completedPeriods = periods.filter(p => p.endDate !== null);
        const totalDays = completedPeriods.reduce((sum, p) => sum + p.durationDays, 0);
        
        results.push({
          placa,
          modelo: normalizeMotorcycleModel(latestMoto.model || 'Modelo n√£o especificado'),
          periods,
          totalDays,
          averageDays: completedPeriods.length > 0 ? Math.round(totalDays / completedPeriods.length) : 0,
          totalPeriods: periods.length,
          totalMaintenances: periods.reduce((sum, p) => sum + p.maintenanceCount, 0),
          currentStatus: latestMoto.status || 'unknown',
          isCurrentlyRented: latestMoto.status === 'alugada' || latestMoto.status === 'relocada'
        });
      }
    });
  } else {
    console.log('‚ö†Ô∏è Sem hist√≥rico m√∫ltiplo - usando estrat√©gia alternativa baseada em tempo atual');
    
    // Nova estrat√©gia: calcular baseado no tempo atual de loca√ß√£o + estimativas da manuten√ß√£o
    motorcyclesByPlaca.forEach((motos, placa) => {
      const moto = motos[0]; // √önico registro por placa
      
      if (!moto.data_ultima_mov) return;

      const currentStatus = moto.status;
      const lastMovementDate = new Date(moto.data_ultima_mov);
      const today = new Date();
      const daysSinceLastMovement = Math.ceil((today.getTime() - lastMovementDate.getTime()) / (1000 * 60 * 60 * 24));

      const periods: RentalPeriod[] = [];

      // Se est√° atualmente alugada/relocada, criar per√≠odo em andamento
      if (currentStatus === 'alugada' || currentStatus === 'relocada') {
        const maintenanceInPeriod = maintenanceData.filter(m => {
          if (m.veiculo_placa !== placa) return false;
          const maintenanceDate = new Date(m.data);
          return maintenanceDate >= lastMovementDate && maintenanceDate <= today;
        });

        periods.push({
          placa,
          startDate: moto.data_ultima_mov,
          endDate: null, // Em andamento
          status: currentStatus,
          durationDays: Math.max(0, daysSinceLastMovement),
          maintenanceCount: maintenanceInPeriod.length,
          maintenanceRecords: maintenanceInPeriod
        });

        totalPeriodsFound++;
        console.log(`    üîÑ Per√≠odo atual: ${moto.data_ultima_mov} ‚Üí hoje (${daysSinceLastMovement} dias, status: ${currentStatus})`);
      }
      // Se n√£o est√° alugada/relocada, simular um per√≠odo completo baseado nas manuten√ß√µes
      else {
        // Buscar manuten√ß√µes desta placa para estimar per√≠odos passados
        const plateMaintenances = maintenanceData.filter(m => m.veiculo_placa === placa);
        
        if (plateMaintenances.length > 0) {
          // Criar per√≠odos estimados baseados nas datas das manuten√ß√µes
          plateMaintenances.forEach(maintenance => {
            const maintenanceDate = new Date(maintenance.data);
            // Estimar que a moto estava alugada por 30 dias antes da manuten√ß√£o
            const estimatedStartDate = new Date(maintenanceDate);
            estimatedStartDate.setDate(estimatedStartDate.getDate() - 30);
            
            periods.push({
              placa,
              startDate: estimatedStartDate.toISOString().split('T')[0],
              endDate: maintenance.data,
              status: 'alugada', // Assumir que estava alugada
              durationDays: 30, // Per√≠odo estimado
              maintenanceCount: 1,
              maintenanceRecords: [maintenance]
            });

            totalCompletedPeriods++;
            console.log(`    üìä Per√≠odo estimado (manuten√ß√£o): ${estimatedStartDate.toISOString().split('T')[0]} ‚Üí ${maintenance.data} (30 dias estimados)`);
          });
        }
        
        // Se tem tempo ocioso registrado, usar para estimar per√≠odo anterior
        if (moto.tempo_ocioso_dias && moto.tempo_ocioso_dias > 0) {
          const estimatedRentalEnd = new Date(lastMovementDate);
          const estimatedRentalStart = new Date(lastMovementDate);
          estimatedRentalStart.setDate(estimatedRentalStart.getDate() - 30); // Estimar 30 dias de loca√ß√£o

          periods.push({
            placa,
            startDate: estimatedRentalStart.toISOString().split('T')[0],
            endDate: moto.data_ultima_mov,
            status: 'alugada',
            durationDays: 30,
            maintenanceCount: 0,
            maintenanceRecords: []
          });

          totalCompletedPeriods++;
          console.log(`    üí° Per√≠odo estimado (tempo ocioso): 30 dias antes de ${moto.data_ultima_mov}`);
        }
      }

      if (periods.length > 0) {
        const completedPeriods = periods.filter(p => p.endDate !== null);
        const totalDays = completedPeriods.reduce((sum, p) => sum + p.durationDays, 0);
        
        results.push({
          placa,
          modelo: normalizeMotorcycleModel(moto.model || 'Modelo n√£o especificado'),
          periods,
          totalDays,
          averageDays: completedPeriods.length > 0 ? Math.round(totalDays / completedPeriods.length) : 0,
          totalPeriods: periods.length,
          totalMaintenances: periods.reduce((sum, p) => sum + p.maintenanceCount, 0),
          currentStatus: currentStatus || 'unknown',
          isCurrentlyRented: currentStatus === 'alugada' || currentStatus === 'relocada'
        });

        totalPeriodsFound += periods.length;
      }
    });
  }

  console.log(`\nüéØ An√°lise conclu√≠da:`);
  console.log(`   ‚Ä¢ Motos com per√≠odos: ${results.length}`);
  console.log(`   ‚Ä¢ Total de per√≠odos encontrados: ${totalPeriodsFound}`);
  console.log(`   ‚Ä¢ Per√≠odos completos: ${totalCompletedPeriods}`);
  console.log(`   ‚Ä¢ Estrat√©gia: ${hasMultipleRecordsPerPlate ? 'Hist√≥rico real' : 'Estimativa baseada em dados dispon√≠veis'}`);

  return results;
}

/**
 * Calcula estat√≠sticas por modelo baseado nos per√≠odos de loca√ß√£o
 */
export function calculateModelRentalStats(rentalAnalyses: RentalAnalysis[]): ModelRentalStats[] {
  const modelStats = new Map<string, {
    motorcycles: Set<string>;
    completedPeriods: number;
    totalDays: number;
    totalMaintenances: number;
  }>();

  rentalAnalyses.forEach(analysis => {
    const modelo = analysis.modelo;
    
    if (!modelStats.has(modelo)) {
      modelStats.set(modelo, {
        motorcycles: new Set(),
        completedPeriods: 0,
        totalDays: 0,
        totalMaintenances: 0
      });
    }

    const stats = modelStats.get(modelo)!;
    stats.motorcycles.add(analysis.placa);
    
    // Contar apenas per√≠odos completos para o c√°lculo da m√©dia
    const completedPeriods = analysis.periods.filter(p => p.endDate !== null);
    stats.completedPeriods += completedPeriods.length;
    stats.totalDays += completedPeriods.reduce((sum, p) => sum + p.durationDays, 0);
    stats.totalMaintenances += analysis.totalMaintenances;
  });

  return Array.from(modelStats.entries()).map(([modelo, stats]) => ({
    modelo,
    totalMotorcycles: stats.motorcycles.size,
    completedPeriods: stats.completedPeriods,
    totalDays: stats.totalDays,
    averageDays: stats.completedPeriods > 0 ? Math.round(stats.totalDays / stats.completedPeriods) : 0,
    totalMaintenances: stats.totalMaintenances,
    averageMaintenancesPerPeriod: stats.completedPeriods > 0 
      ? Math.round((stats.totalMaintenances / stats.completedPeriods) * 100) / 100 
      : 0
  })).sort((a, b) => b.averageDays - a.averageDays);
}

/**
 * Formata per√≠odo para exibi√ß√£o usando UTC para consist√™ncia com gest√£o de motos
 */
export function formatPeriod(period: RentalPeriod): string {
  const startDate = new Date(period.startDate + 'T00:00:00Z').toLocaleDateString('pt-BR', { timeZone: 'UTC' });
  const endDate = period.endDate 
    ? new Date(period.endDate + 'T00:00:00Z').toLocaleDateString('pt-BR', { timeZone: 'UTC' })
    : 'Em andamento';
  
  return `${startDate} - ${endDate}`;
}

/**
 * Calcula estat√≠sticas gerais de todas as loca√ß√µes
 */
export function calculateOverallStats(rentalAnalyses: RentalAnalysis[]) {
  const allCompletedPeriods = rentalAnalyses.flatMap(a => 
    a.periods.filter(p => p.endDate !== null)
  );
  
  const totalDays = allCompletedPeriods.reduce((sum, p) => sum + p.durationDays, 0);
  const totalMaintenances = allCompletedPeriods.reduce((sum, p) => sum + p.maintenanceCount, 0);
  
  return {
    totalMotorcycles: rentalAnalyses.length,
    totalCompletedPeriods: allCompletedPeriods.length,
    averageDays: allCompletedPeriods.length > 0 ? Math.round(totalDays / allCompletedPeriods.length) : 0,
    totalMaintenances,
    averageMaintenancesPerPeriod: allCompletedPeriods.length > 0 
      ? Math.round((totalMaintenances / allCompletedPeriods.length) * 100) / 100 
      : 0,
    currentlyRented: rentalAnalyses.filter(a => a.isCurrentlyRented).length
  };
}